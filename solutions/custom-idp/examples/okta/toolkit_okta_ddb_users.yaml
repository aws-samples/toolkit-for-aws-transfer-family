AWSTemplateFormatVersion: '2010-09-09'
Description: Insert user item into DynamoDB table of Transfer Toolkit

Parameters:
  UsersTableName:
    Type: String
    Default: STACK-NAME_users
    Description: Name of the DynamoDB table to insert the item into
  User:
    Type: String
    Description: User name excluding domain name. if username is john@amazon.com, input john.
  IdentityProviderKey:
    Type: String
    Description: Identity provider key
  SftpRole:
    Type: String
    Description: IAM role ARN to access S3 , arn:aws:iam::[AWS Account Id]:role/[Role Name]
  HomeDirectoryDetails:
    Type: String
    Description: >-
      Home directory details (Entry and Target in JSON format).
      Example: {
        "Entry": "/s3files",
        "Target": "/[bucketname]/prefix/to/files"
      }
  HomeDirectoryType:
    Type: String
    Default: LOGICAL
    Description: Home directory type

Resources:
  InsertUserItem:
    Type: AWS::CloudFormation::CustomResource
    Properties:
      ServiceToken: !GetAtt CustomResourceLambdaFunction.Arn
      UsersTableName: !Ref UsersTableName
      User: !Ref User
      IdentityProviderKey: !Ref IdentityProviderKey
      SftpRole: !Ref SftpRole
      HomeDirectoryDetails: !Ref HomeDirectoryDetails
      HomeDirectoryType: !Ref HomeDirectoryType

  CustomResourceLambdaFunction:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        ZipFile: |
          import json
          import boto3
          from urllib.request import build_opener, HTTPHandler, Request

          def lambda_handler(event, context):
              dynamodb = boto3.resource('dynamodb')
              lambda_client = boto3.client('lambda')
              table_name = event['ResourceProperties']['UsersTableName']
              table = dynamodb.Table(table_name)

              home_directory_details = json.loads(event['ResourceProperties']['HomeDirectoryDetails'])
              item = {
                  'user': event['ResourceProperties']['User'],
                  'identity_provider_key': event['ResourceProperties']['IdentityProviderKey'],
                  'config': {
                      'HomeDirectoryDetails': [home_directory_details],
                      'HomeDirectoryType': event['ResourceProperties']['HomeDirectoryType'],
                      'Role': event['ResourceProperties']['SftpRole']
                  }
              }

              if event['RequestType'] == 'Create':
                  table.put_item(Item=item)
                  response_data = {
                      'Status': 'SUCCESS',
                      'PhysicalResourceId': f"DynamoDBItem-{event['LogicalResourceId']}",
                      'StackId': event['StackId'],
                      'RequestId': event['RequestId'],
                      'LogicalResourceId': event['LogicalResourceId']
                  }
                  send_response(event, context, response_data, lambda_client)
              elif event['RequestType'] == 'Delete':
                  # You can add logic to delete the item here if needed
                  response_data = {
                      'Status': 'SUCCESS',
                      'PhysicalResourceId': f"DynamoDBItem-{event['LogicalResourceId']}",
                      'StackId': event['StackId'],
                      'RequestId': event['RequestId'],
                      'LogicalResourceId': event['LogicalResourceId']
                  }
                  send_response(event, context, response_data, lambda_client)

          def send_response(event, context, response_data, lambda_client):
              response_body = json.dumps({
                  "Status": response_data['Status'],
                  "Reason": "CloudFormation Success",
                  "PhysicalResourceId": response_data['PhysicalResourceId'],
                  "StackId": response_data['StackId'],
                  "RequestId": response_data['RequestId'],
                  "LogicalResourceId": response_data['LogicalResourceId'],
                  "Data": {}
              })
              response_msg = response_body.encode('utf-8')
              opener = build_opener(HTTPHandler)
              request = Request(event['ResponseURL'], data=response_msg)
              request.add_header('Content-Type', '')
              request.add_header('Content-Length', len(response_msg))
              request.get_method = lambda: 'PUT'
              response = opener.open(request)

      Handler: index.lambda_handler
      Role: !GetAtt LambdaExecutionRole.Arn
      Runtime: python3.9
      Timeout: 30

  LambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - 'sts:AssumeRole'
      ManagedPolicyArns:
        - 'arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole'
      Policies:
        - PolicyName: DynamoDBAccess
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - 'dynamodb:PutItem'
                Resource: !Sub 'arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/${UsersTableName}'

Outputs:
  InsertedItemId:
    Value: !Ref InsertUserItem
    Description: ID of the inserted DynamoDB item